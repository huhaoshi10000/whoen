package nl.mendesgans.is.common;

import nl.mendesgans.is.security.PropertyValueEncryptionUtils;
import org.apache.commons.lang.StringUtils;
import org.jasypt.encryption.StringEncryptor;
import org.jasypt.exceptions.EncryptionOperationNotPossibleException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.core.env.Environment;

import java.util.Objects;

/**
 * Utility class which logs property access. Delegates to the constructor injected and by spring create environment dependant
 * on the container on which it runs.
 */
public class IntsEnvironment {
    public static final String ENVKEY_INTS_CONFIG_DIR = "is_service_config_dir";
    private static final Logger LOGGER = LoggerFactory.getLogger(IntsEnvironment.class);
    private final Environment environment;
    private final StringEncryptor stringEncryptor;

    public IntsEnvironment(final Environment environment) {
        this(environment, null);
    }

    public IntsEnvironment(final Environment environment, StringEncryptor stringEncryptor) {
        this.environment = environment;
        this.stringEncryptor = stringEncryptor;
        if (this.stringEncryptor == null) {
            LOGGER.info("No {} is available.", StringEncryptor.class.getName());
        } else {
            LOGGER.info("A {} is available.", StringEncryptor.class.getName());
        }
    }

    public String getProperty(final String key) {
        return this.getProperty(key, null);
    }

    public String getProperty(final String key, final String defaultValue) {
        final String value;

        if (environment.containsProperty(key)) {
            value = fetchAndDecryptIfRequired(key);
            logEnvValue(key, value, false);
        } else {
            if (StringUtils.isEmpty(defaultValue)) {
                LOGGER.warn("Could not find value for key {} and no default value was provided.", key);
            }
            value = defaultValue;
            logEnvValue(key, value, true);
        }
        return value;
    }

    /**
     * Environment properties should already be decrypted.
     * However, this is not the case.
     * TODO: Find out why properties are not decrypted automatically.
     * Refer to other projects, and:
     * https://confluence.bmg.intranet/display/SDT/Decrypting+properties+on+the+fly+made+easy
     */
    private String fetchAndDecryptIfRequired(String key) {
        String rawValue = environment.getRequiredProperty(key);
        final String value;
        if (PropertyValueEncryptionUtils.isEncryptedValue(rawValue)) {
            value = decrypt(key, rawValue);
        } else {
            value = rawValue;
        }
        return value;
    }

    private String decrypt(String key, String encryptedValue) {
        try {
            LOGGER.info("Property {} is encrypted. Decrypting...", key);
            return PropertyValueEncryptionUtils.decrypt(encryptedValue, Objects.requireNonNull(stringEncryptor, "Decryption is required but no StringEncryptor is available."));
        } catch (EncryptionOperationNotPossibleException e) {
            String msg = "Could not decrypt value for key '" + key + "': " + e.getMessage();
            LOGGER.error(msg, e);
            throw new IllegalStateException(msg, e);
        }
    }

    public int getPropertyAsInt(final String key, final String defaultValue) {
        final String property = this.getProperty(key, defaultValue);
        return Integer.parseInt(property);
    }

    private void logEnvValue(final String key, final String value, final boolean isDefault) {
        if (!key.toLowerCase()
                .contains("password")) {
            LOGGER.info("{}='{}' {}", key, value, isDefault ? "(default)" : "");
        } else {
            LOGGER.info("{}='{}' {}", key, "*******", isDefault ? "(default)" : "");
        }
    }
}
