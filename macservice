package nl.mendesgans.is.service;

import nl.mendesgans.is.common.IntsEnvironment;
import nl.mendesgans.is.service.MacService.MacResult;
import nl.mendesgans.is.util.HmacUtil;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class MacServiceTest {

    private IntsEnvironment intsEnvironment;
    private MacService macService;

    @BeforeEach
    void setUp() {
        intsEnvironment = mock(IntsEnvironment.class);
        macService = new MacService(intsEnvironment);
    }

    @Test
    void generateMac_shouldReturnMacResults() throws Exception {
        // Arrange
        String data = "testData";
        String keyA = "keyA";
        String keyB = "keyB";
        String expectedMacA = HmacUtil.hmacHash("HmacSHA256", data, keyA);
        String expectedMacB = HmacUtil.hmacHash("HmacSHA256", data, keyB);

        when(intsEnvironment.getProperty("hmacKeyA")).thenReturn(keyA);
        when(intsEnvironment.getProperty("hmacKeyB")).thenReturn(keyB);

        // Act
        MacResult result = macService.generateMac(data);

        // Assert
        assertNotNull(result);
        assertEquals(expectedMacA, result.getMacA());
        assertEquals(expectedMacB, result.getMacB());

        // Verify that the getProperty method was called with the correct keys
        verify(intsEnvironment).getProperty("hmacKeyA");
        verify(intsEnvironment).getProperty("hmacKeyB");
    }

    @Test
    void generateMac_shouldThrowExceptionWhenKeyIsMissing() {
        // Arrange
        String data = "testData";

        when(intsEnvironment.getProperty("hmacKeyA")).thenReturn(null);
        when(intsEnvironment.getProperty("hmacKeyB")).thenReturn("keyB");

        // Act & Assert
        IllegalStateException exception = assertThrows(IllegalStateException.class, () -> {
            macService.generateMac(data);
        });

        assertEquals("HMAC keys are not available in the environment", exception.getMessage());

        // Verify that the getProperty method was called with the correct keys
        verify(intsEnvironment).getProperty("hmacKeyA");
        verify(intsEnvironment).getProperty("hmacKeyB");
    }

    @Test
    void generateMac_shouldThrowRuntimeExceptionWhenErrorOccurs() throws Exception {
        // Arrange
        String data = "testData";
        String keyA = "keyA";
        String keyB = "keyB";

        when(intsEnvironment.getProperty("hmacKeyA")).thenReturn(keyA);
        when(intsEnvironment.getProperty("hmacKeyB")).thenReturn(keyB);
        doThrow(new RuntimeException("Mocked exception")).when(intsEnvironment).getProperty("hmacKeyA");

        // Act & Assert
        RuntimeException exception = assertThrows(RuntimeException.class, () -> {
            macService.generateMac(data);
        });

        assertEquals("Error generating MAC", exception.getMessage().substring(0, 19));

        // Verify that the getProperty method was called with the correct keys
        verify(intsEnvironment).getProperty("hmacKeyA");
        verify(intsEnvironment).getProperty("hmacKeyB");
    }
}
