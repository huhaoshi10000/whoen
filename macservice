    public boolean validateMac(String macA, String macB, String data) {
        String keyA = intsEnvironment.getProperty(HMAC_KEY_A);
        String keyB = intsEnvironment.getProperty(HMAC_KEY_B);

        if (keyA == null || keyB == null) {
            throw new IllegalStateException("HMAC keys are not available in the environment");
        }

        try {
            String generatedMacA = hmacUtilWrapper.hmacHash("HmacSHA256", data, keyA);
            String generatedMacB = hmacUtilWrapper.hmacHash("HmacSHA256", data, keyB);

            return macA.equals(generatedMacA) || macB.equals(generatedMacB);
        } catch (Exception e) {
            throw new RuntimeException("Error validating MAC", e);
        }
    }
@Test
    void validateMac_shouldReturnTrueWhenMacMatches() throws Exception {
        // Arrange
        String data = "testData";
        String macA = "macA";
        String macB = "macB";
        String keyA = "keyA";
        String keyB = "keyB";
        String generatedMacA = "macA";
        String generatedMacB = "someOtherMacB";

        when(intsEnvironment.getProperty("hmacKeyA")).thenReturn(keyA);
        when(intsEnvironment.getProperty("hmacKeyB")).thenReturn(keyB);
        when(hmacUtilWrapper.hmacHash("HmacSHA256", data, keyA)).thenReturn(generatedMacA);
        when(hmacUtilWrapper.hmacHash("HmacSHA256", data, keyB)).thenReturn(generatedMacB);

        // Act
        boolean result = macService.validateMac(macA, macB, data);

        // Assert
        assertTrue(result);

        // Verify that the getProperty method was called with the correct keys
        verify(intsEnvironment).getProperty("hmacKeyA");
        verify(intsEnvironment).getProperty("hmacKeyB");
    }

    @Test
    void validateMac_shouldReturnFalseWhenNoMacMatches() throws Exception {
        // Arrange
        String data = "testData";
        String macA = "macA";
        String macB = "macB";
        String keyA = "keyA";
        String keyB = "keyB";
        String generatedMacA = "someOtherMacA";
        String generatedMacB = "someOtherMacB";

        when(intsEnvironment.getProperty("hmacKeyA")).thenReturn(keyA);
        when(intsEnvironment.getProperty("hmacKeyB")).thenReturn(keyB);
        when(hmacUtilWrapper.hmacHash("HmacSHA256", data, keyA)).thenReturn(generatedMacA);
        when(hmacUtilWrapper.hmacHash("HmacSHA256", data, keyB)).thenReturn(generatedMacB);

        // Act
        boolean result = macService.validateMac(macA, macB, data);

        // Assert
        assertFalse(result);

        // Verify that the getProperty method was called with the correct keys
        verify(intsEnvironment).getProperty("hmacKeyA");
        verify(intsEnvironment).getProperty("hmacKeyB");
    }

    @Test
    void validateMac_shouldThrowExceptionWhenKeyIsMissing() {
        // Arrange
        String data = "testData";
        String macA = "macA";
        String macB = "macB";

        when(intsEnvironment.getProperty("hmacKeyA")).thenReturn(null);
        when(intsEnvironment.getProperty("hmacKeyB")).thenReturn("keyB");

        // Act & Assert
        IllegalStateException exception = assertThrows(IllegalStateException.class, () -> {
            macService.validateMac(macA, macB, data);
        });

        assertEquals("HMAC keys are not available in the environment", exception.getMessage());

        // Verify that the getProperty method was called with the correct keys
        verify(intsEnvironment).getProperty("hmacKeyA");
        verify(intsEnvironment).getProperty("hmacKeyB");
    }
